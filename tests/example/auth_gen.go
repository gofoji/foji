// Code generated by foji (dev build), template: foji/openapi/auth.go.tpl; DO NOT EDIT.

package example

import (
	"context"
	"net/http"

	"github.com/bir/iken/httputil"
)

type (
	// AuthenticateFunc is the signature of a function used to authenticate an http request.
	// Given a request, it returns the authenticated user.  If unable to authenticate the
	// request it returns an error.
	AuthenticateFunc = httputil.AuthenticateFunc[*ExampleAuth]

	SecurityGroup  = httputil.SecurityGroup[*ExampleAuth]
	SecurityGroups = httputil.SecurityGroups[*ExampleAuth]
	AuthorizeFunc  = httputil.AuthorizeFunc[*ExampleAuth]

	// Authenticator takes a key (for example a bearer token) and returns the authenticated user.
	Authenticator = func(ctx context.Context, key string) (*ExampleAuth, error)
)

// HeaderAuthAuth is responsible for extracting "HeaderAuth" credentials from a request and calling the
// supplied Authenticator to authenticate
func HeaderAuthAuth(fn Authenticator) AuthenticateFunc {
	return func(r *http.Request) (*ExampleAuth, error) {
		key := r.Header.Get("Authorization")
		if len(key) == 0 {
			return nil, httputil.ErrUnauthorized
		}

		return fn(r.Context(), key)
	}
}

// JwtAuth is responsible for extracting "Jwt" credentials from a request and calling the
// supplied Authenticator to authenticate
func JwtAuth(fn Authenticator) AuthenticateFunc {
	return func(r *http.Request) (*ExampleAuth, error) {
		key := r.URL.Query().Get("jwt")
		if len(key) == 0 {
			return nil, httputil.ErrUnauthorized
		}

		return fn(r.Context(), key)
	}
}
