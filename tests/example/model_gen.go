// Code generated by foji (dev build), template: foji/openapi/model.go.tpl; DO NOT EDIT.

package example

import (
	"database/sql/driver"
	"encoding/json"
	"errors"
	"fmt"
	"math"
	"net/http"
	"regexp"
	"time"

	"github.com/bir/iken/forms"
	"github.com/bir/iken/validation"
	"github.com/google/uuid"
)

var ErrMissingRequiredField = errors.New("missing required field")

// Component Schemas

// Bar
//
// OpenAPI Component Schema: Bar
type Bar struct {
	Bar string `json:"bar,omitempty,omitzero"`
}

// Example
//
// OpenAPI Component Schema: Example
type Example struct {
	ID           uuid.UUID    `json:"id"`
	IdMaybe      *uuid.UUID   `json:"idMaybe,omitempty,omitzero"`
	Name         string       `json:"name,omitempty,omitzero"`
	PlayerAlways PlayerAlways `json:"playerAlways,omitempty,omitzero"`
	PlayerID     uuid.UUID    `json:"playerId,omitempty,omitzero"`
	PlayerMaybe  *PlayerMaybe `json:"playerMaybe,omitempty,omitzero"`
}

func (p *Example) UnmarshalJSON(b []byte) error {
	var requiredCheck map[string]any

	if err := json.Unmarshal(b, &requiredCheck); err != nil {
		return validation.Error{err.Error(), fmt.Errorf("Example.UnmarshalJSON Required: `%v`: %w", string(b), err)}
	}

	var validationErrors validation.Errors

	if _, ok := requiredCheck["id"]; !ok {
		validationErrors.Add("id", ErrMissingRequiredField)
	}

	if validationErrors != nil {
		return validationErrors.GetErr()
	}

	type ExampleJSON Example
	var parseObject ExampleJSON

	if err := json.Unmarshal(b, &parseObject); err != nil {
		return validation.Error{err.Error(), fmt.Errorf("Example.UnmarshalJSON: `%v`: %w", string(b), err)}
	}

	v := Example(parseObject)

	*p = v

	return nil
}

// Examples
//
// OpenAPI Component Schema: Examples
type Examples struct {
	List []Example `json:"list"`
}

func (p *Examples) UnmarshalJSON(b []byte) error {
	var requiredCheck map[string]any

	if err := json.Unmarshal(b, &requiredCheck); err != nil {
		return validation.Error{err.Error(), fmt.Errorf("Examples.UnmarshalJSON Required: `%v`: %w", string(b), err)}
	}

	var validationErrors validation.Errors

	if _, ok := requiredCheck["list"]; !ok {
		validationErrors.Add("list", ErrMissingRequiredField)
	}

	if validationErrors != nil {
		return validationErrors.GetErr()
	}

	type ExamplesJSON Examples
	var parseObject ExamplesJSON

	if err := json.Unmarshal(b, &parseObject); err != nil {
		return validation.Error{err.Error(), fmt.Errorf("Examples.UnmarshalJSON: `%v`: %w", string(b), err)}
	}

	v := Examples(parseObject)

	*p = v

	return nil
}

// Foo
//
// OpenAPI Component Schema: Foo
type Foo struct {
	Foo string `json:"foo,omitempty,omitzero"`
}

// FooBar
//
// OpenAPI Component Schema: FooBar
type FooBar struct {
	Buzz string `json:"buzz,omitempty,omitzero"`

	// OpenAPI Ref: #/components/schemas/Foo
	Foo

	// OpenAPI Ref: #/components/schemas/Bar
	Bar
}

// int32
//
// OpenAPI Component Schema: IntValue
type IntValue int32

func (p *IntValue) UnmarshalJSON(b []byte) error {
	type IntValueJSON IntValue
	var parseObject IntValueJSON

	if err := json.Unmarshal(b, &parseObject); err != nil {
		return validation.Error{err.Error(), fmt.Errorf("IntValue.UnmarshalJSON: `%v`: %w", string(b), err)}
	}

	v := IntValue(parseObject)

	if err := v.Validate(); err != nil {
		return err
	}

	*p = v

	return nil
}

func (p IntValue) MarshalJSON() ([]byte, error) {
	if err := p.Validate(); err != nil {
		return nil, err
	}

	type unvalidated IntValue // Skips the validation check
	b, err := json.Marshal(unvalidated(p))
	if err != nil {
		return nil, fmt.Errorf("IntValue.Marshal: `%+v`: %w", p, err)
	}

	return b, nil
}

func (p IntValue) Validate() error {
	var err validation.Errors

	if p < 2 {
		_ = err.Add("", "must be >= 2")
	}

	if p > 10 {
		_ = err.Add("", "must be <= 10")
	}

	if p%2 != 0 {
		_ = err.Add("", "must be multiple of 2")
	}

	return err.GetErr()
}

// any
// Named object
//
// OpenAPI Component Schema: NamedObject
type NamedObject any

// Patterns
//
// OpenAPI Component Schema: Patterns
type Patterns struct {
	ID             uuid.UUID        `json:"id"`
	IdMaybe        uuid.UUID        `json:"idMaybe,omitempty,omitzero"`
	State          *string          `json:"state,omitempty,omitzero"`
	State2         string           `json:"state2,omitempty,omitzero"`
	State3         *string          `json:"state3,omitempty,omitzero"`
	StateAlways    string           `json:"stateAlways"`
	SubInt         IntValue         `json:"subInt,omitempty"`
	SubObject      SubPattern       `json:"subObject"`
	SubObjectMaybe *SubPattern      `json:"subObjectMaybe,omitempty,omitzero"`
	SubState       State            `json:"subState"`
	SubStateMaybe  *State           `json:"subStateMaybe,omitempty,omitzero"`
	SubValue       PatternsSubValue `json:"subValue,omitempty,omitzero"`
	TimeStamp      time.Time        `json:"timeStamp"`
	TimeStampMaybe time.Time        `json:"timeStampMaybe,omitempty,omitzero"`
	Value          int32            `json:"value,omitempty"`
	ValueF         float32          `json:"valueF,omitempty"`
	ValueFmaybe    *float32         `json:"valueFMaybe,omitempty"`
	ValueMaybe     *int32           `json:"valueMaybe,omitempty"`
	Values         []string         `json:"values,omitempty"`
	ValuesMaybe    *[]string        `json:"valuesMaybe,omitempty"`
}

// PatternsSubValue
//
// OpenAPI Patterns inline subValue: PatternsSubValue
type PatternsSubValue struct {
	Num int32 `json:"num,omitempty"`
}

func (p *PatternsSubValue) UnmarshalJSON(b []byte) error {
	type PatternsSubValueJSON PatternsSubValue
	var parseObject PatternsSubValueJSON

	if err := json.Unmarshal(b, &parseObject); err != nil {
		return validation.Error{err.Error(), fmt.Errorf("PatternsSubValue.UnmarshalJSON: `%v`: %w", string(b), err)}
	}

	v := PatternsSubValue(parseObject)

	if err := v.Validate(); err != nil {
		return err
	}

	*p = v

	return nil
}

func (p PatternsSubValue) MarshalJSON() ([]byte, error) {
	if err := p.Validate(); err != nil {
		return nil, err
	}

	type unvalidated PatternsSubValue // Skips the validation check
	b, err := json.Marshal(unvalidated(p))
	if err != nil {
		return nil, fmt.Errorf("PatternsSubValue.Marshal: `%+v`: %w", p, err)
	}

	return b, nil
}

func (p PatternsSubValue) Validate() error {
	var err validation.Errors

	p.ValidateNum(&err)

	return err.GetErr()
}

func (p PatternsSubValue) ValidateNum(err *validation.Errors) {
	if p.Num < 2 {
		_ = err.Add("num", "must be >= 2")
	}
}

var (
	patternsStatePattern         = regexp.MustCompile(`(enabled|disabled)`)
	patternsState2Pattern        = regexp.MustCompile(`(enabled|disabled)`)
	patternsStateAlwaysPattern   = regexp.MustCompile(`(enabled|disabled)`)
	patternsSubStatePattern      = regexp.MustCompile(`(enabled|disabled)`)
	patternsSubStateMaybePattern = regexp.MustCompile(`(enabled|disabled)`)
)

func (p *Patterns) UnmarshalJSON(b []byte) error {
	var requiredCheck map[string]any

	if err := json.Unmarshal(b, &requiredCheck); err != nil {
		return validation.Error{err.Error(), fmt.Errorf("Patterns.UnmarshalJSON Required: `%v`: %w", string(b), err)}
	}

	var validationErrors validation.Errors

	if _, ok := requiredCheck["id"]; !ok {
		validationErrors.Add("id", ErrMissingRequiredField)
	}

	if _, ok := requiredCheck["stateAlways"]; !ok {
		validationErrors.Add("stateAlways", ErrMissingRequiredField)
	}

	if _, ok := requiredCheck["subObject"]; !ok {
		validationErrors.Add("subObject", ErrMissingRequiredField)
	}

	if _, ok := requiredCheck["subState"]; !ok {
		validationErrors.Add("subState", ErrMissingRequiredField)
	}

	if _, ok := requiredCheck["timeStamp"]; !ok {
		validationErrors.Add("timeStamp", ErrMissingRequiredField)
	}

	if validationErrors != nil {
		return validationErrors.GetErr()
	}

	type PatternsJSON Patterns
	var parseObject PatternsJSON

	if err := json.Unmarshal(b, &parseObject); err != nil {
		return validation.Error{err.Error(), fmt.Errorf("Patterns.UnmarshalJSON: `%v`: %w", string(b), err)}
	}

	v := Patterns(parseObject)

	if _, ok := requiredCheck["state3"]; !ok {
		defaultVal := "completed"
		v.State3 = &defaultVal
	}

	if err := v.Validate(); err != nil {
		return err
	}

	*p = v

	return nil
}

func (p Patterns) MarshalJSON() ([]byte, error) {
	if err := p.Validate(); err != nil {
		return nil, err
	}

	type unvalidated Patterns // Skips the validation check
	b, err := json.Marshal(unvalidated(p))
	if err != nil {
		return nil, fmt.Errorf("Patterns.Marshal: `%+v`: %w", p, err)
	}

	return b, nil
}

func (p Patterns) Validate() error {
	var err validation.Errors

	p.ValidateState(&err)
	p.ValidateState2(&err)
	p.ValidateStateAlways(&err)
	p.ValidateSubInt(&err)
	p.ValidateSubObject(&err)
	p.ValidateSubObjectMaybe(&err)
	p.ValidateSubState(&err)
	p.ValidateSubStateMaybe(&err)
	p.ValidateSubValue(&err)
	p.ValidateValue(&err)
	p.ValidateValueF(&err)
	p.ValidateValueFmaybe(&err)
	p.ValidateValueMaybe(&err)
	p.ValidateValues(&err)
	p.ValidateValuesMaybe(&err)

	return err.GetErr()
}

func (p Patterns) ValidateState(err *validation.Errors) {
	if p.State == nil {
		return
	}

	if len(*p.State) < 2 {
		_ = err.Add("state", "length must be >= 2")
	}

	if len(*p.State) > 10 {
		_ = err.Add("state", "length must be <= 10")
	}

	if *p.State != "" && !patternsStatePattern.MatchString(string(*p.State)) {
		_ = err.Add("state", `must match "(enabled|disabled)"`)
	}
}

func (p Patterns) ValidateState2(err *validation.Errors) {
	if p.State2 != "" && !patternsState2Pattern.MatchString(string(p.State2)) {
		_ = err.Add("state2", `must match "(enabled|disabled)"`)
	}
}

func (p Patterns) ValidateStateAlways(err *validation.Errors) {
	if p.StateAlways != "" && !patternsStateAlwaysPattern.MatchString(string(p.StateAlways)) {
		_ = err.Add("stateAlways", `must match "(enabled|disabled)"`)
	}
}

func (p Patterns) ValidateSubInt(err *validation.Errors) {
	if subErr := p.SubInt.Validate(); subErr != nil {
		_ = err.Add("subInt", subErr)
	}
}

func (p Patterns) ValidateSubObject(err *validation.Errors) {
	if subErr := p.SubObject.Validate(); subErr != nil {
		_ = err.Add("subObject", subErr)
	}
}

func (p Patterns) ValidateSubObjectMaybe(err *validation.Errors) {
	if p.SubObjectMaybe == nil {
		return
	}

	if p.SubObjectMaybe != nil {
		if subErr := p.SubObjectMaybe.Validate(); subErr != nil {
			_ = err.Add("subObjectMaybe", subErr)
		}
	}
}

func (p Patterns) ValidateSubState(err *validation.Errors) {
	if subErr := p.SubState.Validate(); subErr != nil {
		_ = err.Add("subState", subErr)
	}
}

func (p Patterns) ValidateSubStateMaybe(err *validation.Errors) {
	if p.SubStateMaybe == nil {
		return
	}

	if p.SubStateMaybe != nil {
		if subErr := p.SubStateMaybe.Validate(); subErr != nil {
			_ = err.Add("subStateMaybe", subErr)
		}
	}
}

func (p Patterns) ValidateSubValue(err *validation.Errors) {
	if subErr := p.SubValue.Validate(); subErr != nil {
		_ = err.Add("subValue", subErr)
	}
}

func (p Patterns) ValidateValue(err *validation.Errors) {
	if p.Value < 2 {
		_ = err.Add("value", "must be >= 2")
	}

	if p.Value > 10 {
		_ = err.Add("value", "must be <= 10")
	}

	if p.Value%2 != 0 {
		_ = err.Add("value", "must be multiple of 2")
	}
}

func (p Patterns) ValidateValueF(err *validation.Errors) {
	if p.ValueF < 2 {
		_ = err.Add("valueF", "must be >= 2")
	}

	if p.ValueF > 10 {
		_ = err.Add("valueF", "must be <= 10")
	}

	if math.Mod(float64(p.ValueF), 2) != 0 {
		_ = err.Add("valueF", "must be multiple of 2")
	}
}

func (p Patterns) ValidateValueFmaybe(err *validation.Errors) {
	if p.ValueFmaybe == nil {
		return
	}

	if *p.ValueFmaybe < 2 {
		_ = err.Add("valueFMaybe", "must be >= 2")
	}

	if *p.ValueFmaybe > 10 {
		_ = err.Add("valueFMaybe", "must be <= 10")
	}

	if math.Mod(float64(*p.ValueFmaybe), 2) != 0 {
		_ = err.Add("valueFMaybe", "must be multiple of 2")
	}
}

func (p Patterns) ValidateValueMaybe(err *validation.Errors) {
	if p.ValueMaybe == nil {
		return
	}

	if *p.ValueMaybe < 2 {
		_ = err.Add("valueMaybe", "must be >= 2")
	}

	if *p.ValueMaybe > 10 {
		_ = err.Add("valueMaybe", "must be <= 10")
	}

	if *p.ValueMaybe%2 != 0 {
		_ = err.Add("valueMaybe", "must be multiple of 2")
	}
}

func (p Patterns) ValidateValues(err *validation.Errors) {
	if len(p.Values) < 2 {
		_ = err.Add("values", "length must be >= 2")
	}

	if len(p.Values) > 10 {
		_ = err.Add("values", "length must be <= 10")
	}
}

func (p Patterns) ValidateValuesMaybe(err *validation.Errors) {
	if p.ValuesMaybe == nil {
		return
	}

	if len(*p.ValuesMaybe) < 2 {
		_ = err.Add("valuesMaybe", "length must be >= 2")
	}

	if len(*p.ValuesMaybe) > 10 {
		_ = err.Add("valuesMaybe", "length must be <= 10")
	}
}

// PlayerAlways
//
// OpenAPI Component Schema: PlayerAlways
type PlayerAlways struct {
	ID uuid.UUID `json:"id"`
}

func (p *PlayerAlways) UnmarshalJSON(b []byte) error {
	var requiredCheck map[string]any

	if err := json.Unmarshal(b, &requiredCheck); err != nil {
		return validation.Error{err.Error(), fmt.Errorf("PlayerAlways.UnmarshalJSON Required: `%v`: %w", string(b), err)}
	}

	var validationErrors validation.Errors

	if _, ok := requiredCheck["id"]; !ok {
		validationErrors.Add("id", ErrMissingRequiredField)
	}

	if validationErrors != nil {
		return validationErrors.GetErr()
	}

	type PlayerAlwaysJSON PlayerAlways
	var parseObject PlayerAlwaysJSON

	if err := json.Unmarshal(b, &parseObject); err != nil {
		return validation.Error{err.Error(), fmt.Errorf("PlayerAlways.UnmarshalJSON: `%v`: %w", string(b), err)}
	}

	v := PlayerAlways(parseObject)

	*p = v

	return nil
}

// uuid.UUID
//
// OpenAPI Component Schema: PlayerId
type PlayerID uuid.UUID

// PlayerMaybe
//
// OpenAPI Component Schema: PlayerMaybe
type PlayerMaybe struct {
	ID uuid.UUID `json:"id"`
}

func (p *PlayerMaybe) UnmarshalJSON(b []byte) error {
	var requiredCheck map[string]any

	if err := json.Unmarshal(b, &requiredCheck); err != nil {
		return validation.Error{err.Error(), fmt.Errorf("PlayerMaybe.UnmarshalJSON Required: `%v`: %w", string(b), err)}
	}

	var validationErrors validation.Errors

	if _, ok := requiredCheck["id"]; !ok {
		validationErrors.Add("id", ErrMissingRequiredField)
	}

	if validationErrors != nil {
		return validationErrors.GetErr()
	}

	type PlayerMaybeJSON PlayerMaybe
	var parseObject PlayerMaybeJSON

	if err := json.Unmarshal(b, &parseObject); err != nil {
		return validation.Error{err.Error(), fmt.Errorf("PlayerMaybe.UnmarshalJSON: `%v`: %w", string(b), err)}
	}

	v := PlayerMaybe(parseObject)

	*p = v

	return nil
}

// Season
//
// OpenAPI Component Schema: Season

// Season
// Component Schema : Season
type Season int8

const (
	UnknownSeason Season = iota
	SeasonSpring
	SeasonSummer
	SeasonFall
	SeasonWinter
)

func NewSeason(name string) Season {
	switch name {
	case "spring":
		return SeasonSpring
	case "summer":
		return SeasonSummer
	case "fall":
		return SeasonFall
	case "winter":
		return SeasonWinter
	}

	return Season(0)
}

var SeasonString = map[Season]string{
	SeasonSpring: "spring",
	SeasonSummer: "summer",
	SeasonFall:   "fall",
	SeasonWinter: "winter",
}

func (e Season) String() string {
	return SeasonString[e]
}

func (e *Season) UnmarshalJSON(input []byte) (err error) {
	var i int8

	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = Season(i)
		return nil
	}

	var s string

	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}

	*e = NewSeason(s)

	return nil
}

func (e Season) MarshalJSON() ([]byte, error) {
	return json.Marshal(e.String())
}

func (e Season) Value() (driver.Value, error) {
	return json.Marshal(e.String())
}

func (e *Season) Scan(src interface{}) error {
	s, ok := src.(string)
	if !ok {
		return fmt.Errorf("Season.scan: scanned a %T, not []byte", src) //nolint
	}

	*e = NewSeason(s)

	return nil
}

// string
//
// OpenAPI Component Schema: State
type State string

var statePattern = regexp.MustCompile(`(enabled|disabled)`)

func (p *State) UnmarshalJSON(b []byte) error {
	type StateJSON State
	var parseObject StateJSON

	if err := json.Unmarshal(b, &parseObject); err != nil {
		return validation.Error{err.Error(), fmt.Errorf("State.UnmarshalJSON: `%v`: %w", string(b), err)}
	}

	v := State(parseObject)

	if err := v.Validate(); err != nil {
		return err
	}

	*p = v

	return nil
}

func (p State) MarshalJSON() ([]byte, error) {
	if err := p.Validate(); err != nil {
		return nil, err
	}

	type unvalidated State // Skips the validation check
	b, err := json.Marshal(unvalidated(p))
	if err != nil {
		return nil, fmt.Errorf("State.Marshal: `%+v`: %w", p, err)
	}

	return b, nil
}

func (p State) Validate() error {
	var err validation.Errors

	if len(p) < 2 {
		_ = err.Add("", "length must be >= 2")
	}

	if len(p) > 10 {
		_ = err.Add("", "length must be <= 10")
	}

	if p != "" && !statePattern.MatchString(string(p)) {
		_ = err.Add("", `must match "(enabled|disabled)"`)
	}

	return err.GetErr()
}

// SubPattern
//
// OpenAPI Component Schema: SubPattern
type SubPattern struct {
	Num int32 `json:"num,omitempty"`
}

func (p *SubPattern) UnmarshalJSON(b []byte) error {
	type SubPatternJSON SubPattern
	var parseObject SubPatternJSON

	if err := json.Unmarshal(b, &parseObject); err != nil {
		return validation.Error{err.Error(), fmt.Errorf("SubPattern.UnmarshalJSON: `%v`: %w", string(b), err)}
	}

	v := SubPattern(parseObject)

	if err := v.Validate(); err != nil {
		return err
	}

	*p = v

	return nil
}

func (p SubPattern) MarshalJSON() ([]byte, error) {
	if err := p.Validate(); err != nil {
		return nil, err
	}

	type unvalidated SubPattern // Skips the validation check
	b, err := json.Marshal(unvalidated(p))
	if err != nil {
		return nil, fmt.Errorf("SubPattern.Marshal: `%+v`: %w", p, err)
	}

	return b, nil
}

func (p SubPattern) Validate() error {
	var err validation.Errors

	p.ValidateNum(&err)

	return err.GetErr()
}

func (p SubPattern) ValidateNum(err *validation.Errors) {
	if p.Num < 2 {
		_ = err.Add("num", "must be >= 2")
	}
}

// []XarrayEnum
//
// OpenAPI Component Schema: XArrayEnum
type XarrayEnum []XarrayEnumItem

// XarrayEnumItem
//
// OpenAPI []XarrayEnum inline item XArrayEnum: XarrayEnumItem

// XarrayEnumItem
// []XarrayEnum inline item XArrayEnum : XarrayEnumItem
type XarrayEnumItem int8

const (
	UnknownXarrayEnumItem XarrayEnumItem = iota
	XarrayEnumItemOptionA
	XarrayEnumItemOptionB
	XarrayEnumItemOptionC
)

func NewXarrayEnumItem(name string) XarrayEnumItem {
	switch name {
	case "option_a":
		return XarrayEnumItemOptionA
	case "option_b":
		return XarrayEnumItemOptionB
	case "option_c":
		return XarrayEnumItemOptionC
	}

	return XarrayEnumItem(0)
}

var XarrayEnumItemString = map[XarrayEnumItem]string{
	XarrayEnumItemOptionA: "option_a",
	XarrayEnumItemOptionB: "option_b",
	XarrayEnumItemOptionC: "option_c",
}

func (e XarrayEnumItem) String() string {
	return XarrayEnumItemString[e]
}

func (e *XarrayEnumItem) UnmarshalJSON(input []byte) (err error) {
	var i int8

	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = XarrayEnumItem(i)
		return nil
	}

	var s string

	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}

	*e = NewXarrayEnumItem(s)

	return nil
}

func (e XarrayEnumItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(e.String())
}

func (e XarrayEnumItem) Value() (driver.Value, error) {
	return json.Marshal(e.String())
}

func (e *XarrayEnumItem) Scan(src interface{}) error {
	s, ok := src.(string)
	if !ok {
		return fmt.Errorf("XarrayEnumItem.scan: scanned a %T, not []byte", src) //nolint
	}

	*e = NewXarrayEnumItem(s)

	return nil
}

// []XarrayObjectArrayEnum
//
// OpenAPI Component Schema: XArrayObjectArrayEnum
type XarrayObjectArrayEnum []XarrayObjectArrayEnumItem

// XarrayObjectArrayEnumItem
//
// OpenAPI []XarrayObjectArrayEnum inline item XArrayObjectArrayEnum: XarrayObjectArrayEnumItem
type XarrayObjectArrayEnumItem struct {
	List []XarrayObjectArrayEnumItemList `json:"list,omitempty"`
}

// XarrayObjectArrayEnumItemList
//
// OpenAPI XarrayObjectArrayEnumItem inline item list: XarrayObjectArrayEnumItemList

// XarrayObjectArrayEnumItemList
// XarrayObjectArrayEnumItem inline item list : XarrayObjectArrayEnumItemList
type XarrayObjectArrayEnumItemList int8

const (
	UnknownXarrayObjectArrayEnumItemList XarrayObjectArrayEnumItemList = iota
	XarrayObjectArrayEnumItemListOptionA
	XarrayObjectArrayEnumItemListOptionB
	XarrayObjectArrayEnumItemListOptionC
)

func NewXarrayObjectArrayEnumItemList(name string) XarrayObjectArrayEnumItemList {
	switch name {
	case "option_a":
		return XarrayObjectArrayEnumItemListOptionA
	case "option_b":
		return XarrayObjectArrayEnumItemListOptionB
	case "option_c":
		return XarrayObjectArrayEnumItemListOptionC
	}

	return XarrayObjectArrayEnumItemList(0)
}

var XarrayObjectArrayEnumItemListString = map[XarrayObjectArrayEnumItemList]string{
	XarrayObjectArrayEnumItemListOptionA: "option_a",
	XarrayObjectArrayEnumItemListOptionB: "option_b",
	XarrayObjectArrayEnumItemListOptionC: "option_c",
}

func (e XarrayObjectArrayEnumItemList) String() string {
	return XarrayObjectArrayEnumItemListString[e]
}

func (e *XarrayObjectArrayEnumItemList) UnmarshalJSON(input []byte) (err error) {
	var i int8

	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = XarrayObjectArrayEnumItemList(i)
		return nil
	}

	var s string

	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}

	*e = NewXarrayObjectArrayEnumItemList(s)

	return nil
}

func (e XarrayObjectArrayEnumItemList) MarshalJSON() ([]byte, error) {
	return json.Marshal(e.String())
}

func (e XarrayObjectArrayEnumItemList) Value() (driver.Value, error) {
	return json.Marshal(e.String())
}

func (e *XarrayObjectArrayEnumItemList) Scan(src interface{}) error {
	s, ok := src.(string)
	if !ok {
		return fmt.Errorf("XarrayObjectArrayEnumItemList.scan: scanned a %T, not []byte", src) //nolint
	}

	*e = NewXarrayObjectArrayEnumItemList(s)

	return nil
}

// []XarrayObjectEnum
//
// OpenAPI Component Schema: XArrayObjectEnum
type XarrayObjectEnum []XarrayObjectEnumItem

// XarrayObjectEnumItem
//
// OpenAPI []XarrayObjectEnum inline item XArrayObjectEnum: XarrayObjectEnumItem
type XarrayObjectEnumItem struct {
	Options XarrayObjectEnumItemOptions `json:"options,omitempty,omitzero"`
}

// XarrayObjectEnumItemOptions
// []XarrayObjectEnum inline item XArrayObjectEnum : options
type XarrayObjectEnumItemOptions int8

const (
	UnknownXarrayObjectEnumItemOptions XarrayObjectEnumItemOptions = iota
	XarrayObjectEnumItemOptionsOptionA
	XarrayObjectEnumItemOptionsOptionB
	XarrayObjectEnumItemOptionsOptionC
)

func NewXarrayObjectEnumItemOptions(name string) XarrayObjectEnumItemOptions {
	switch name {
	case "option_a":
		return XarrayObjectEnumItemOptionsOptionA
	case "option_b":
		return XarrayObjectEnumItemOptionsOptionB
	case "option_c":
		return XarrayObjectEnumItemOptionsOptionC
	}

	return XarrayObjectEnumItemOptions(0)
}

var XarrayObjectEnumItemOptionsString = map[XarrayObjectEnumItemOptions]string{
	XarrayObjectEnumItemOptionsOptionA: "option_a",
	XarrayObjectEnumItemOptionsOptionB: "option_b",
	XarrayObjectEnumItemOptionsOptionC: "option_c",
}

func (e XarrayObjectEnumItemOptions) String() string {
	return XarrayObjectEnumItemOptionsString[e]
}

func (e *XarrayObjectEnumItemOptions) UnmarshalJSON(input []byte) (err error) {
	var i int8

	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = XarrayObjectEnumItemOptions(i)
		return nil
	}

	var s string

	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}

	*e = NewXarrayObjectEnumItemOptions(s)

	return nil
}

func (e XarrayObjectEnumItemOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(e.String())
}

func (e XarrayObjectEnumItemOptions) Value() (driver.Value, error) {
	return json.Marshal(e.String())
}

func (e *XarrayObjectEnumItemOptions) Scan(src interface{}) error {
	s, ok := src.(string)
	if !ok {
		return fmt.Errorf("XarrayObjectEnumItemOptions.scan: scanned a %T, not []byte", src) //nolint
	}

	*e = NewXarrayObjectEnumItemOptions(s)

	return nil
}

// XobjectArrayEnum
//
// OpenAPI Component Schema: XObjectArrayEnum
type XobjectArrayEnum struct {
	Items []XobjectArrayEnumItems `json:"items,omitempty"`
}

// XobjectArrayEnumItems
//
// OpenAPI XobjectArrayEnum inline item items: XobjectArrayEnumItems

// XobjectArrayEnumItems
// XobjectArrayEnum inline item items : XobjectArrayEnumItems
type XobjectArrayEnumItems int8

const (
	UnknownXobjectArrayEnumItems XobjectArrayEnumItems = iota
	XobjectArrayEnumItemsOptionA
	XobjectArrayEnumItemsOptionB
	XobjectArrayEnumItemsOptionC
)

func NewXobjectArrayEnumItems(name string) XobjectArrayEnumItems {
	switch name {
	case "option_a":
		return XobjectArrayEnumItemsOptionA
	case "option_b":
		return XobjectArrayEnumItemsOptionB
	case "option_c":
		return XobjectArrayEnumItemsOptionC
	}

	return XobjectArrayEnumItems(0)
}

var XobjectArrayEnumItemsString = map[XobjectArrayEnumItems]string{
	XobjectArrayEnumItemsOptionA: "option_a",
	XobjectArrayEnumItemsOptionB: "option_b",
	XobjectArrayEnumItemsOptionC: "option_c",
}

func (e XobjectArrayEnumItems) String() string {
	return XobjectArrayEnumItemsString[e]
}

func (e *XobjectArrayEnumItems) UnmarshalJSON(input []byte) (err error) {
	var i int8

	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = XobjectArrayEnumItems(i)
		return nil
	}

	var s string

	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}

	*e = NewXobjectArrayEnumItems(s)

	return nil
}

func (e XobjectArrayEnumItems) MarshalJSON() ([]byte, error) {
	return json.Marshal(e.String())
}

func (e XobjectArrayEnumItems) Value() (driver.Value, error) {
	return json.Marshal(e.String())
}

func (e *XobjectArrayEnumItems) Scan(src interface{}) error {
	s, ok := src.(string)
	if !ok {
		return fmt.Errorf("XobjectArrayEnumItems.scan: scanned a %T, not []byte", src) //nolint
	}

	*e = NewXobjectArrayEnumItems(s)

	return nil
}

// XobjectArrayObjectEnum
//
// OpenAPI Component Schema: XObjectArrayObjectEnum
type XobjectArrayObjectEnum struct {
	List []XobjectArrayObjectEnumList `json:"list,omitempty"`
}

// XobjectArrayObjectEnumList
//
// OpenAPI XobjectArrayObjectEnum inline item list: XobjectArrayObjectEnumList
type XobjectArrayObjectEnumList struct {
	Options XobjectArrayObjectEnumListOptions `json:"options,omitempty,omitzero"`
}

// XobjectArrayObjectEnumListOptions
// XobjectArrayObjectEnum inline item list : options
type XobjectArrayObjectEnumListOptions int8

const (
	UnknownXobjectArrayObjectEnumListOptions XobjectArrayObjectEnumListOptions = iota
	XobjectArrayObjectEnumListOptionsOptionA
	XobjectArrayObjectEnumListOptionsOptionB
	XobjectArrayObjectEnumListOptionsOptionC
)

func NewXobjectArrayObjectEnumListOptions(name string) XobjectArrayObjectEnumListOptions {
	switch name {
	case "option_a":
		return XobjectArrayObjectEnumListOptionsOptionA
	case "option_b":
		return XobjectArrayObjectEnumListOptionsOptionB
	case "option_c":
		return XobjectArrayObjectEnumListOptionsOptionC
	}

	return XobjectArrayObjectEnumListOptions(0)
}

var XobjectArrayObjectEnumListOptionsString = map[XobjectArrayObjectEnumListOptions]string{
	XobjectArrayObjectEnumListOptionsOptionA: "option_a",
	XobjectArrayObjectEnumListOptionsOptionB: "option_b",
	XobjectArrayObjectEnumListOptionsOptionC: "option_c",
}

func (e XobjectArrayObjectEnumListOptions) String() string {
	return XobjectArrayObjectEnumListOptionsString[e]
}

func (e *XobjectArrayObjectEnumListOptions) UnmarshalJSON(input []byte) (err error) {
	var i int8

	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = XobjectArrayObjectEnumListOptions(i)
		return nil
	}

	var s string

	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}

	*e = NewXobjectArrayObjectEnumListOptions(s)

	return nil
}

func (e XobjectArrayObjectEnumListOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(e.String())
}

func (e XobjectArrayObjectEnumListOptions) Value() (driver.Value, error) {
	return json.Marshal(e.String())
}

func (e *XobjectArrayObjectEnumListOptions) Scan(src interface{}) error {
	s, ok := src.(string)
	if !ok {
		return fmt.Errorf("XobjectArrayObjectEnumListOptions.scan: scanned a %T, not []byte", src) //nolint
	}

	*e = NewXobjectArrayObjectEnumListOptions(s)

	return nil
}

// XobjectEnum
//
// OpenAPI Component Schema: XObjectEnum
type XobjectEnum struct {
	Options XobjectEnumOptions `json:"options,omitempty,omitzero"`
}

// XobjectEnumOptions
// Component Schema : options
type XobjectEnumOptions int8

const (
	UnknownXobjectEnumOptions XobjectEnumOptions = iota
	XobjectEnumOptionsOptionA
	XobjectEnumOptionsOptionB
	XobjectEnumOptionsOptionC
)

func NewXobjectEnumOptions(name string) XobjectEnumOptions {
	switch name {
	case "option_a":
		return XobjectEnumOptionsOptionA
	case "option_b":
		return XobjectEnumOptionsOptionB
	case "option_c":
		return XobjectEnumOptionsOptionC
	}

	return XobjectEnumOptions(0)
}

var XobjectEnumOptionsString = map[XobjectEnumOptions]string{
	XobjectEnumOptionsOptionA: "option_a",
	XobjectEnumOptionsOptionB: "option_b",
	XobjectEnumOptionsOptionC: "option_c",
}

func (e XobjectEnumOptions) String() string {
	return XobjectEnumOptionsString[e]
}

func (e *XobjectEnumOptions) UnmarshalJSON(input []byte) (err error) {
	var i int8

	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = XobjectEnumOptions(i)
		return nil
	}

	var s string

	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}

	*e = NewXobjectEnumOptions(s)

	return nil
}

func (e XobjectEnumOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(e.String())
}

func (e XobjectEnumOptions) Value() (driver.Value, error) {
	return json.Marshal(e.String())
}

func (e *XobjectEnumOptions) Scan(src interface{}) error {
	s, ok := src.(string)
	if !ok {
		return fmt.Errorf("XobjectEnumOptions.scan: scanned a %T, not []byte", src) //nolint
	}

	*e = NewXobjectEnumOptions(s)

	return nil
}

// ErrorV1
// Standard error format
//
// OpenAPI Component Schema: errorV1
type ErrorV1 struct {
	Code    string `json:"code,omitempty,omitzero"`
	Message string `json:"message,omitempty,omitzero"`
}

// ExampleKebabCaseField
//
// OpenAPI Component Schema: example-kebab-case-field
type ExampleKebabCaseField struct {
	Seniority string `json:"seniority,omitempty,omitzero"`
	Tier      string `json:"tier,omitempty,omitzero"`
}

var (
	exampleKebabCaseFieldSeniorityPattern = regexp.MustCompile(`(^[1-9]\d*$)`)
	exampleKebabCaseFieldTierPattern      = regexp.MustCompile(`(alpha|beta|gama)`)
)

func (p *ExampleKebabCaseField) UnmarshalJSON(b []byte) error {
	type ExampleKebabCaseFieldJSON ExampleKebabCaseField
	var parseObject ExampleKebabCaseFieldJSON

	if err := json.Unmarshal(b, &parseObject); err != nil {
		return validation.Error{err.Error(), fmt.Errorf("ExampleKebabCaseField.UnmarshalJSON: `%v`: %w", string(b), err)}
	}

	v := ExampleKebabCaseField(parseObject)

	if err := v.Validate(); err != nil {
		return err
	}

	*p = v

	return nil
}

func (p ExampleKebabCaseField) MarshalJSON() ([]byte, error) {
	if err := p.Validate(); err != nil {
		return nil, err
	}

	type unvalidated ExampleKebabCaseField // Skips the validation check
	b, err := json.Marshal(unvalidated(p))
	if err != nil {
		return nil, fmt.Errorf("ExampleKebabCaseField.Marshal: `%+v`: %w", p, err)
	}

	return b, nil
}

func (p ExampleKebabCaseField) Validate() error {
	var err validation.Errors

	p.ValidateSeniority(&err)
	p.ValidateTier(&err)

	return err.GetErr()
}

func (p ExampleKebabCaseField) ValidateSeniority(err *validation.Errors) {
	if p.Seniority != "" && !exampleKebabCaseFieldSeniorityPattern.MatchString(string(p.Seniority)) {
		_ = err.Add("seniority", `must match "(^[1-9]\d*$)"`)
	}
}

func (p ExampleKebabCaseField) ValidateTier(err *validation.Errors) {
	if p.Tier != "" && !exampleKebabCaseFieldTierPattern.MatchString(string(p.Tier)) {
		_ = err.Add("tier", `must match "(alpha|beta|gama)"`)
	}
}

// Component Parameters

// ColorQuery
// Component Parameter: color
type ColorQuery int8

const (
	UnknownColorQuery ColorQuery = iota
	ColorQueryRed
	ColorQueryGreen
	ColorQueryBlue
)

func NewColorQuery(name string) ColorQuery {
	switch name {
	case "red":
		return ColorQueryRed
	case "green":
		return ColorQueryGreen
	case "blue":
		return ColorQueryBlue
	}

	return ColorQuery(0)
}

var ColorQueryString = map[ColorQuery]string{
	ColorQueryRed:   "red",
	ColorQueryGreen: "green",
	ColorQueryBlue:  "blue",
}

func (e ColorQuery) String() string {
	return ColorQueryString[e]
}

func (e *ColorQuery) UnmarshalJSON(input []byte) (err error) {
	var i int8

	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = ColorQuery(i)
		return nil
	}

	var s string

	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}

	*e = NewColorQuery(s)

	return nil
}

func (e ColorQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(e.String())
}

func (e ColorQuery) Value() (driver.Value, error) {
	return json.Marshal(e.String())
}

func (e *ColorQuery) Scan(src interface{}) error {
	s, ok := src.(string)
	if !ok {
		return fmt.Errorf("ColorQuery.scan: scanned a %T, not []byte", src) //nolint
	}

	*e = NewColorQuery(s)

	return nil
}

// ColorQueryDefault
// Component Parameter: colorDefault
type ColorQueryDefault int8

const (
	UnknownColorQueryDefault ColorQueryDefault = iota
	ColorQueryDefaultRed
	ColorQueryDefaultGreen
	ColorQueryDefaultBlue
)

func NewColorQueryDefault(name string) ColorQueryDefault {
	switch name {
	case "red":
		return ColorQueryDefaultRed
	case "green":
		return ColorQueryDefaultGreen
	case "blue":
		return ColorQueryDefaultBlue
	}

	return ColorQueryDefault(0)
}

var ColorQueryDefaultString = map[ColorQueryDefault]string{
	ColorQueryDefaultRed:   "red",
	ColorQueryDefaultGreen: "green",
	ColorQueryDefaultBlue:  "blue",
}

func (e ColorQueryDefault) String() string {
	return ColorQueryDefaultString[e]
}

func (e *ColorQueryDefault) UnmarshalJSON(input []byte) (err error) {
	var i int8

	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = ColorQueryDefault(i)
		return nil
	}

	var s string

	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}

	*e = NewColorQueryDefault(s)

	return nil
}

func (e ColorQueryDefault) MarshalJSON() ([]byte, error) {
	return json.Marshal(e.String())
}

func (e ColorQueryDefault) Value() (driver.Value, error) {
	return json.Marshal(e.String())
}

func (e *ColorQueryDefault) Scan(src interface{}) error {
	s, ok := src.(string)
	if !ok {
		return fmt.Errorf("ColorQueryDefault.scan: scanned a %T, not []byte", src) //nolint
	}

	*e = NewColorQueryDefault(s)

	return nil
}

// Path Operations

// AddFormRequest
//
// OpenAPI AddForm Body: AddForm Request
type AddFormRequest struct {
	F01 bool              `json:"f01,omitempty"`
	F02 int32             `json:"f02,omitempty"`
	F03 int32             `json:"f03,omitempty"`
	F04 int64             `json:"f04,omitempty"`
	F05 time.Time         `json:"f05,omitempty,omitzero"`
	F06 uuid.UUID         `json:"f06,omitempty,omitzero"`
	F07 string            `json:"f07"`
	F08 AddFormRequestF08 `json:"f08,omitempty,omitzero"`
	F09 Season            `json:"f09,omitempty,omitzero"`
	F10 []string          `json:"f10,omitempty"`
	F11 []int32           `json:"f11,omitempty"`
	F12 []Season          `json:"f12,omitempty"`
}

// AddFormRequestF08
// AddForm Body : f08
type AddFormRequestF08 int8

const (
	UnknownAddFormRequestF08 AddFormRequestF08 = iota
	AddFormRequestF08ValueA
	AddFormRequestF08ValueB
)

func NewAddFormRequestF08(name string) AddFormRequestF08 {
	switch name {
	case "valueA":
		return AddFormRequestF08ValueA
	case "valueB":
		return AddFormRequestF08ValueB
	}

	return AddFormRequestF08(0)
}

var AddFormRequestF08String = map[AddFormRequestF08]string{
	AddFormRequestF08ValueA: "valueA",
	AddFormRequestF08ValueB: "valueB",
}

func (e AddFormRequestF08) String() string {
	return AddFormRequestF08String[e]
}

func (e *AddFormRequestF08) UnmarshalJSON(input []byte) (err error) {
	var i int8

	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = AddFormRequestF08(i)
		return nil
	}

	var s string

	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}

	*e = NewAddFormRequestF08(s)

	return nil
}

func (e AddFormRequestF08) MarshalJSON() ([]byte, error) {
	return json.Marshal(e.String())
}

func (e AddFormRequestF08) Value() (driver.Value, error) {
	return json.Marshal(e.String())
}

func (e *AddFormRequestF08) Scan(src interface{}) error {
	s, ok := src.(string)
	if !ok {
		return fmt.Errorf("AddFormRequestF08.scan: scanned a %T, not []byte", src) //nolint
	}

	*e = NewAddFormRequestF08(s)

	return nil
}

func ParseFormAddFormRequest(r *http.Request) (AddFormRequest, error) {
	var (
		parseErrors validation.Errors
		err         error
		ok          bool
		v           AddFormRequest
	)

	v.F01, _, err = forms.GetBool(r.FormValue, "f01", false)
	if err != nil {
		parseErrors.Add("f01", err)
	}

	v.F02, _, err = forms.GetInt32(r.FormValue, "f02", false)
	if err != nil {
		parseErrors.Add("f02", err)
	}

	v.F03, _, err = forms.GetInt32(r.FormValue, "f03", false)
	if err != nil {
		parseErrors.Add("f03", err)
	}

	v.F04, ok, err = forms.GetInt64(r.FormValue, "f04", false)
	if err != nil {
		parseErrors.Add("f04", err)
	} else if !ok {
		v.F04 = 1
	}

	v.F05, _, err = forms.GetTime(r.FormValue, "f05", false)
	if err != nil {
		parseErrors.Add("f05", err)
	}

	v.F06, _, err = forms.GetUUID(r.FormValue, "f06", false)
	if err != nil {
		parseErrors.Add("f06", err)
	}

	v.F07, _, err = forms.GetString(r.FormValue, "f07", true)
	if err != nil {
		parseErrors.Add("f07", err)
	}

	v.F08, ok, err = forms.GetEnum(r.FormValue, "f08", false, NewAddFormRequestF08)
	if err != nil {
		parseErrors.Add("f08", err)
	} else if !ok {
		v.F08 = AddFormRequestF08ValueA
	}

	v.F09, _, err = forms.GetEnum(r.FormValue, "f09", false, NewSeason)
	if err != nil {
		parseErrors.Add("f09", err)
	}

	v.F10, _, err = forms.GetStringArray(r.FormValue, "f10", false)
	if err != nil {
		parseErrors.Add("f10", err)
	}

	v.F11, _, err = forms.GetInt32Array(r.FormValue, "f11", false)
	if err != nil {
		parseErrors.Add("f11", err)
	}

	v.F12, _, err = forms.GetEnumArray(r.FormValue, "f12", false, NewSeason)
	if err != nil {
		parseErrors.Add("f12", err)
	}

	if parseErrors != nil {
		return AddFormRequest{}, parseErrors.GetErr()
	}

	if err := v.Validate(); err != nil {
		return AddFormRequest{}, err
	}

	return v, nil
}

func (p AddFormRequest) Validate() error {
	var err validation.Errors

	p.ValidateF10(&err)

	return err.GetErr()
}

func (p AddFormRequest) ValidateF10(err *validation.Errors) {
	if len(p.F10) < 1 {
		_ = err.Add("f10", "length must be >= 1")
	}
}

// AddMultipartFormRequest
//
// OpenAPI AddMultipartForm Body: AddMultipartForm Request
type AddMultipartFormRequest struct {
	F1    bool       `json:"f1,omitempty"`
	F2    int32      `json:"f2,omitempty"`
	F3    int32      `json:"f3,omitempty"`
	F4    int64      `json:"f4,omitempty"`
	F5    time.Time  `json:"f5,omitempty,omitzero"`
	F6    uuid.UUID  `json:"f6,omitempty,omitzero"`
	F7    string     `json:"f7,omitempty,omitzero"`
	File1 forms.File `json:"file1"`
	File2 forms.File `json:"file2,omitempty,omitzero"`
}

func ParseFormAddMultipartFormRequest(r *http.Request) (AddMultipartFormRequest, error) {
	var (
		parseErrors validation.Errors
		err         error
		v           AddMultipartFormRequest
	)

	v.F1, _, err = forms.GetBool(r.FormValue, "f1", false)
	if err != nil {
		parseErrors.Add("f1", err)
	}

	v.F2, _, err = forms.GetInt32(r.FormValue, "f2", false)
	if err != nil {
		parseErrors.Add("f2", err)
	}

	v.F3, _, err = forms.GetInt32(r.FormValue, "f3", false)
	if err != nil {
		parseErrors.Add("f3", err)
	}

	v.F4, _, err = forms.GetInt64(r.FormValue, "f4", false)
	if err != nil {
		parseErrors.Add("f4", err)
	}

	v.F5, _, err = forms.GetTime(r.FormValue, "f5", false)
	if err != nil {
		parseErrors.Add("f5", err)
	}

	v.F6, _, err = forms.GetUUID(r.FormValue, "f6", false)
	if err != nil {
		parseErrors.Add("f6", err)
	}

	v.F7, _, err = forms.GetString(r.FormValue, "f7", false)
	if err != nil {
		parseErrors.Add("f7", err)
	}

	v.File1, _, err = forms.GetFile(r, "file1", true)
	if err != nil {
		parseErrors.Add("file1", err)
	}

	v.File2, _, err = forms.GetFile(r, "file2", false)
	if err != nil {
		parseErrors.Add("file2", err)
	}

	if parseErrors != nil {
		return AddMultipartFormRequest{}, parseErrors.GetErr()
	}

	return v, nil
}

// AddInlinedAllOfRequest
//
// OpenAPI AddInlinedAllOf Body: AddInlinedAllOf Request
type AddInlinedAllOfRequest struct {
	Special bool `json:"special,omitempty"`

	// OpenAPI Ref: #/components/schemas/Foo
	Foo
}

// AddInlinedBodyRequest
//
// OpenAPI AddInlinedBody Body: AddInlinedBody Request
type AddInlinedBodyRequest struct {
	F01 bool                     `json:"f01,omitempty"`
	F02 int32                    `json:"f02,omitempty"`
	F03 int32                    `json:"f03,omitempty"`
	F04 int64                    `json:"f04,omitempty"`
	F05 time.Time                `json:"f05,omitempty,omitzero"`
	F06 uuid.UUID                `json:"f06,omitempty,omitzero"`
	F07 string                   `json:"f07"`
	F08 AddInlinedBodyRequestF08 `json:"f08,omitempty,omitzero"`
	F09 Season                   `json:"f09,omitempty,omitzero"`
	F10 []string                 `json:"f10"`
	F11 []int32                  `json:"f11,omitempty"`
	F12 []Season                 `json:"f12,omitempty"`
	F13 string                   `json:"f13,omitempty,omitzero"`
}

// AddInlinedBodyRequestF08
// AddInlinedBody Body : f08
type AddInlinedBodyRequestF08 int8

const (
	UnknownAddInlinedBodyRequestF08 AddInlinedBodyRequestF08 = iota
	AddInlinedBodyRequestF08ValueA
	AddInlinedBodyRequestF08ValueB
)

func NewAddInlinedBodyRequestF08(name string) AddInlinedBodyRequestF08 {
	switch name {
	case "valueA":
		return AddInlinedBodyRequestF08ValueA
	case "valueB":
		return AddInlinedBodyRequestF08ValueB
	}

	return AddInlinedBodyRequestF08(0)
}

var AddInlinedBodyRequestF08String = map[AddInlinedBodyRequestF08]string{
	AddInlinedBodyRequestF08ValueA: "valueA",
	AddInlinedBodyRequestF08ValueB: "valueB",
}

func (e AddInlinedBodyRequestF08) String() string {
	return AddInlinedBodyRequestF08String[e]
}

func (e *AddInlinedBodyRequestF08) UnmarshalJSON(input []byte) (err error) {
	var i int8

	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = AddInlinedBodyRequestF08(i)
		return nil
	}

	var s string

	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}

	*e = NewAddInlinedBodyRequestF08(s)

	return nil
}

func (e AddInlinedBodyRequestF08) MarshalJSON() ([]byte, error) {
	return json.Marshal(e.String())
}

func (e AddInlinedBodyRequestF08) Value() (driver.Value, error) {
	return json.Marshal(e.String())
}

func (e *AddInlinedBodyRequestF08) Scan(src interface{}) error {
	s, ok := src.(string)
	if !ok {
		return fmt.Errorf("AddInlinedBodyRequestF08.scan: scanned a %T, not []byte", src) //nolint
	}

	*e = NewAddInlinedBodyRequestF08(s)

	return nil
}

func (p *AddInlinedBodyRequest) UnmarshalJSON(b []byte) error {
	var requiredCheck map[string]any

	if err := json.Unmarshal(b, &requiredCheck); err != nil {
		return validation.Error{err.Error(), fmt.Errorf("AddInlinedBodyRequest.UnmarshalJSON Required: `%v`: %w", string(b), err)}
	}

	var validationErrors validation.Errors

	if _, ok := requiredCheck["f07"]; !ok {
		validationErrors.Add("f07", ErrMissingRequiredField)
	}

	if _, ok := requiredCheck["f10"]; !ok {
		validationErrors.Add("f10", ErrMissingRequiredField)
	}

	if validationErrors != nil {
		return validationErrors.GetErr()
	}

	type AddInlinedBodyRequestJSON AddInlinedBodyRequest
	var parseObject AddInlinedBodyRequestJSON

	if err := json.Unmarshal(b, &parseObject); err != nil {
		return validation.Error{err.Error(), fmt.Errorf("AddInlinedBodyRequest.UnmarshalJSON: `%v`: %w", string(b), err)}
	}

	v := AddInlinedBodyRequest(parseObject)

	if _, ok := requiredCheck["f04"]; !ok {
		v.F04 = 1
	}

	if _, ok := requiredCheck["f08"]; !ok {
		v.F08 = AddInlinedBodyRequestF08ValueA
	}

	if _, ok := requiredCheck["f13"]; !ok {
		v.F13 = "someValue"
	}

	if err := v.Validate(); err != nil {
		return err
	}

	*p = v

	return nil
}

func (p AddInlinedBodyRequest) MarshalJSON() ([]byte, error) {
	if err := p.Validate(); err != nil {
		return nil, err
	}

	type unvalidated AddInlinedBodyRequest // Skips the validation check
	b, err := json.Marshal(unvalidated(p))
	if err != nil {
		return nil, fmt.Errorf("AddInlinedBodyRequest.Marshal: `%+v`: %w", p, err)
	}

	return b, nil
}

func (p AddInlinedBodyRequest) Validate() error {
	var err validation.Errors

	p.ValidateF10(&err)

	return err.GetErr()
}

func (p AddInlinedBodyRequest) ValidateF10(err *validation.Errors) {
	if len(p.F10) < 1 {
		_ = err.Add("f10", "length must be >= 1")
	}
}

// GetExampleParamsEnumTest
// Enum Description
// Op: getExampleParams Param: enumTest
type GetExampleParamsEnumTest int8

const (
	UnknownGetExampleParamsEnumTest GetExampleParamsEnumTest = iota
	GetExampleParamsEnumTestValueA
	GetExampleParamsEnumTestValueB
)

func NewGetExampleParamsEnumTest(name string) GetExampleParamsEnumTest {
	switch name {
	case "valueA":
		return GetExampleParamsEnumTestValueA
	case "valueB":
		return GetExampleParamsEnumTestValueB
	}

	return GetExampleParamsEnumTest(0)
}

var GetExampleParamsEnumTestString = map[GetExampleParamsEnumTest]string{
	GetExampleParamsEnumTestValueA: "valueA",
	GetExampleParamsEnumTestValueB: "valueB",
}

func (e GetExampleParamsEnumTest) String() string {
	return GetExampleParamsEnumTestString[e]
}

func (e *GetExampleParamsEnumTest) UnmarshalJSON(input []byte) (err error) {
	var i int8

	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = GetExampleParamsEnumTest(i)
		return nil
	}

	var s string

	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}

	*e = NewGetExampleParamsEnumTest(s)

	return nil
}

func (e GetExampleParamsEnumTest) MarshalJSON() ([]byte, error) {
	return json.Marshal(e.String())
}

func (e GetExampleParamsEnumTest) Value() (driver.Value, error) {
	return json.Marshal(e.String())
}

func (e *GetExampleParamsEnumTest) Scan(src interface{}) error {
	s, ok := src.(string)
	if !ok {
		return fmt.Errorf("GetExampleParamsEnumTest.scan: scanned a %T, not []byte", src) //nolint
	}

	*e = NewGetExampleParamsEnumTest(s)

	return nil
}

// GetRawRequestVehicle
// Op: getRawRequest Param: vehicle
type GetRawRequestVehicle int8

const (
	UnknownGetRawRequestVehicle GetRawRequestVehicle = iota
	GetRawRequestVehicleCar
	GetRawRequestVehicleTruck
	GetRawRequestVehicleBike
)

func NewGetRawRequestVehicle(name string) GetRawRequestVehicle {
	switch name {
	case "car":
		return GetRawRequestVehicleCar
	case "truck":
		return GetRawRequestVehicleTruck
	case "bike":
		return GetRawRequestVehicleBike
	}

	return GetRawRequestVehicle(0)
}

var GetRawRequestVehicleString = map[GetRawRequestVehicle]string{
	GetRawRequestVehicleCar:   "car",
	GetRawRequestVehicleTruck: "truck",
	GetRawRequestVehicleBike:  "bike",
}

func (e GetRawRequestVehicle) String() string {
	return GetRawRequestVehicleString[e]
}

func (e *GetRawRequestVehicle) UnmarshalJSON(input []byte) (err error) {
	var i int8

	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = GetRawRequestVehicle(i)
		return nil
	}

	var s string

	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}

	*e = NewGetRawRequestVehicle(s)

	return nil
}

func (e GetRawRequestVehicle) MarshalJSON() ([]byte, error) {
	return json.Marshal(e.String())
}

func (e GetRawRequestVehicle) Value() (driver.Value, error) {
	return json.Marshal(e.String())
}

func (e *GetRawRequestVehicle) Scan(src interface{}) error {
	s, ok := src.(string)
	if !ok {
		return fmt.Errorf("GetRawRequestVehicle.scan: scanned a %T, not []byte", src) //nolint
	}

	*e = NewGetRawRequestVehicle(s)

	return nil
}

// GetRawRequestResponseVehicle
// Op: getRawRequestResponse Param: vehicle
type GetRawRequestResponseVehicle int8

const (
	UnknownGetRawRequestResponseVehicle GetRawRequestResponseVehicle = iota
	GetRawRequestResponseVehicleCar
	GetRawRequestResponseVehicleTruck
	GetRawRequestResponseVehicleBike
)

func NewGetRawRequestResponseVehicle(name string) GetRawRequestResponseVehicle {
	switch name {
	case "car":
		return GetRawRequestResponseVehicleCar
	case "truck":
		return GetRawRequestResponseVehicleTruck
	case "bike":
		return GetRawRequestResponseVehicleBike
	}

	return GetRawRequestResponseVehicle(0)
}

var GetRawRequestResponseVehicleString = map[GetRawRequestResponseVehicle]string{
	GetRawRequestResponseVehicleCar:   "car",
	GetRawRequestResponseVehicleTruck: "truck",
	GetRawRequestResponseVehicleBike:  "bike",
}

func (e GetRawRequestResponseVehicle) String() string {
	return GetRawRequestResponseVehicleString[e]
}

func (e *GetRawRequestResponseVehicle) UnmarshalJSON(input []byte) (err error) {
	var i int8

	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = GetRawRequestResponseVehicle(i)
		return nil
	}

	var s string

	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}

	*e = NewGetRawRequestResponseVehicle(s)

	return nil
}

func (e GetRawRequestResponseVehicle) MarshalJSON() ([]byte, error) {
	return json.Marshal(e.String())
}

func (e GetRawRequestResponseVehicle) Value() (driver.Value, error) {
	return json.Marshal(e.String())
}

func (e *GetRawRequestResponseVehicle) Scan(src interface{}) error {
	s, ok := src.(string)
	if !ok {
		return fmt.Errorf("GetRawRequestResponseVehicle.scan: scanned a %T, not []byte", src) //nolint
	}

	*e = NewGetRawRequestResponseVehicle(s)

	return nil
}

// GetRawRequestResponseAndHeadersVehicle
// Op: getRawRequestResponseAndHeaders Param: vehicle
type GetRawRequestResponseAndHeadersVehicle int8

const (
	UnknownGetRawRequestResponseAndHeadersVehicle GetRawRequestResponseAndHeadersVehicle = iota
	GetRawRequestResponseAndHeadersVehicleCar
	GetRawRequestResponseAndHeadersVehicleTruck
	GetRawRequestResponseAndHeadersVehicleBike
)

func NewGetRawRequestResponseAndHeadersVehicle(name string) GetRawRequestResponseAndHeadersVehicle {
	switch name {
	case "car":
		return GetRawRequestResponseAndHeadersVehicleCar
	case "truck":
		return GetRawRequestResponseAndHeadersVehicleTruck
	case "bike":
		return GetRawRequestResponseAndHeadersVehicleBike
	}

	return GetRawRequestResponseAndHeadersVehicle(0)
}

var GetRawRequestResponseAndHeadersVehicleString = map[GetRawRequestResponseAndHeadersVehicle]string{
	GetRawRequestResponseAndHeadersVehicleCar:   "car",
	GetRawRequestResponseAndHeadersVehicleTruck: "truck",
	GetRawRequestResponseAndHeadersVehicleBike:  "bike",
}

func (e GetRawRequestResponseAndHeadersVehicle) String() string {
	return GetRawRequestResponseAndHeadersVehicleString[e]
}

func (e *GetRawRequestResponseAndHeadersVehicle) UnmarshalJSON(input []byte) (err error) {
	var i int8

	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = GetRawRequestResponseAndHeadersVehicle(i)
		return nil
	}

	var s string

	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}

	*e = NewGetRawRequestResponseAndHeadersVehicle(s)

	return nil
}

func (e GetRawRequestResponseAndHeadersVehicle) MarshalJSON() ([]byte, error) {
	return json.Marshal(e.String())
}

func (e GetRawRequestResponseAndHeadersVehicle) Value() (driver.Value, error) {
	return json.Marshal(e.String())
}

func (e *GetRawRequestResponseAndHeadersVehicle) Scan(src interface{}) error {
	s, ok := src.(string)
	if !ok {
		return fmt.Errorf("GetRawRequestResponseAndHeadersVehicle.scan: scanned a %T, not []byte", src) //nolint
	}

	*e = NewGetRawRequestResponseAndHeadersVehicle(s)

	return nil
}

// GetRawResponseVehicle
// Op: getRawResponse Param: vehicle
type GetRawResponseVehicle int8

const (
	UnknownGetRawResponseVehicle GetRawResponseVehicle = iota
	GetRawResponseVehicleCar
	GetRawResponseVehicleTruck
	GetRawResponseVehicleBike
)

func NewGetRawResponseVehicle(name string) GetRawResponseVehicle {
	switch name {
	case "car":
		return GetRawResponseVehicleCar
	case "truck":
		return GetRawResponseVehicleTruck
	case "bike":
		return GetRawResponseVehicleBike
	}

	return GetRawResponseVehicle(0)
}

var GetRawResponseVehicleString = map[GetRawResponseVehicle]string{
	GetRawResponseVehicleCar:   "car",
	GetRawResponseVehicleTruck: "truck",
	GetRawResponseVehicleBike:  "bike",
}

func (e GetRawResponseVehicle) String() string {
	return GetRawResponseVehicleString[e]
}

func (e *GetRawResponseVehicle) UnmarshalJSON(input []byte) (err error) {
	var i int8

	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = GetRawResponseVehicle(i)
		return nil
	}

	var s string

	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}

	*e = NewGetRawResponseVehicle(s)

	return nil
}

func (e GetRawResponseVehicle) MarshalJSON() ([]byte, error) {
	return json.Marshal(e.String())
}

func (e GetRawResponseVehicle) Value() (driver.Value, error) {
	return json.Marshal(e.String())
}

func (e *GetRawResponseVehicle) Scan(src interface{}) error {
	s, ok := src.(string)
	if !ok {
		return fmt.Errorf("GetRawResponseVehicle.scan: scanned a %T, not []byte", src) //nolint
	}

	*e = NewGetRawResponseVehicle(s)

	return nil
}

// GetTestVehicle
// Op: getTest Param: vehicle
type GetTestVehicle int8

const (
	UnknownGetTestVehicle GetTestVehicle = iota
	GetTestVehicleCar
	GetTestVehicleTruck
	GetTestVehicleBike
)

func NewGetTestVehicle(name string) GetTestVehicle {
	switch name {
	case "car":
		return GetTestVehicleCar
	case "truck":
		return GetTestVehicleTruck
	case "bike":
		return GetTestVehicleBike
	}

	return GetTestVehicle(0)
}

var GetTestVehicleString = map[GetTestVehicle]string{
	GetTestVehicleCar:   "car",
	GetTestVehicleTruck: "truck",
	GetTestVehicleBike:  "bike",
}

func (e GetTestVehicle) String() string {
	return GetTestVehicleString[e]
}

func (e *GetTestVehicle) UnmarshalJSON(input []byte) (err error) {
	var i int8

	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = GetTestVehicle(i)
		return nil
	}

	var s string

	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}

	*e = NewGetTestVehicle(s)

	return nil
}

func (e GetTestVehicle) MarshalJSON() ([]byte, error) {
	return json.Marshal(e.String())
}

func (e GetTestVehicle) Value() (driver.Value, error) {
	return json.Marshal(e.String())
}

func (e *GetTestVehicle) Scan(src interface{}) error {
	s, ok := src.(string)
	if !ok {
		return fmt.Errorf("GetTestVehicle.scan: scanned a %T, not []byte", src) //nolint
	}

	*e = NewGetTestVehicle(s)

	return nil
}

// GetTestVehicleDefault
// Op: getTest Param: vehicleDefault
type GetTestVehicleDefault int8

const (
	UnknownGetTestVehicleDefault GetTestVehicleDefault = iota
	GetTestVehicleDefaultCar
	GetTestVehicleDefaultTruck
	GetTestVehicleDefaultBike
)

func NewGetTestVehicleDefault(name string) GetTestVehicleDefault {
	switch name {
	case "car":
		return GetTestVehicleDefaultCar
	case "truck":
		return GetTestVehicleDefaultTruck
	case "bike":
		return GetTestVehicleDefaultBike
	}

	return GetTestVehicleDefault(0)
}

var GetTestVehicleDefaultString = map[GetTestVehicleDefault]string{
	GetTestVehicleDefaultCar:   "car",
	GetTestVehicleDefaultTruck: "truck",
	GetTestVehicleDefaultBike:  "bike",
}

func (e GetTestVehicleDefault) String() string {
	return GetTestVehicleDefaultString[e]
}

func (e *GetTestVehicleDefault) UnmarshalJSON(input []byte) (err error) {
	var i int8

	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = GetTestVehicleDefault(i)
		return nil
	}

	var s string

	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}

	*e = NewGetTestVehicleDefault(s)

	return nil
}

func (e GetTestVehicleDefault) MarshalJSON() ([]byte, error) {
	return json.Marshal(e.String())
}

func (e GetTestVehicleDefault) Value() (driver.Value, error) {
	return json.Marshal(e.String())
}

func (e *GetTestVehicleDefault) Scan(src interface{}) error {
	s, ok := src.(string)
	if !ok {
		return fmt.Errorf("GetTestVehicleDefault.scan: scanned a %T, not []byte", src) //nolint
	}

	*e = NewGetTestVehicleDefault(s)

	return nil
}
