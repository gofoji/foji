openapi: 3.0.3
info:
  version: v0
  title: Test
tags:
  - name: Examples

security: []
paths:
  /examples:
    get:
      operationId: getExamples
      responses:
        "200":
          description: 'Examples'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Examples"
  /examples/key1/{k1}/key2/{k2}/key3/{k3}/key4/{key4}/key5/{key5}:
    get:
      operationId: getExampleParams
      parameters:
        - name: k1
          in: path
          required: true
          schema:
            type: string
        - name: k2
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: k3
          in: path
          required: true
          schema:
            type: string
            format: date-time
        - name: k4
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: k5
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: enumTest
          in: query
          required: false
          description: Enum Description
          schema:
            type: string
            default: valueA
            enum:
              - valueA
              - valueB
      responses:
        "200":
          description: 'Example'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Example"
  /examples/query:
    get:
      operationId: getExampleQuery
      parameters:
        - name: k1
          in: query
          required: true
          schema:
            type: string
        - name: k2
          in: query
          required: true
          schema:
            type: string
            format: uuid
        - name: k3
          in: query
          required: true
          schema:
            type: string
            format: date-time
        - name: k4
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: k5
          in: query
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: 'Example'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Example"
  /examples/optional:
    get:
      operationId: getExampleOptional
      parameters:
        - name: k1
          in: query
          schema:
            type: string
        - name: k2
          in: query
          schema:
            type: string
            format: uuid
        - name: k3
          in: query
          schema:
            type: string
            format: date-time
        - name: k4
          in: query
          schema:
            type: integer
            format: int32
        - name: k5
          in: query
          schema:
            type: integer
            format: int64
        - name: k5Default
          in: query
          schema:
            type: integer
            format: int64
            default: 1
      responses:
        "200":
          description: 'Example'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Example"
  /examples/test:
    get:
      operationId: getTest
      parameters:
        - name: vehicle
          in: query
          required: true
          schema:
            type: string
            enum:
              - car
              - truck
              - bike
        - name: vehicleDefault
          in: query
          required: true
          schema:
            type: string
            default: car
            enum:
              - car
              - truck
              - bike
        - $ref: "#/components/parameters/PlayerIdQuery"
        - $ref: "#/components/parameters/ColorQuery"
        - $ref: "#/components/parameters/ColorQueryDefault"
        - $ref: "#/components/parameters/SeasonQuery"
      responses:
        "200":
          description: 'Example'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Example"
  /examples/rawRequest:
    get:
      operationId: getRawRequest
      x-raw-request: true
      parameters:
        - name: vehicle
          in: query
          required: true
          schema:
            type: string
            enum:
              - car
              - truck
              - bike
      responses:
        "200":
          description: 'Example'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Example"
  /examples/rawResponse:
    get:
      operationId: getRawResponse
      x-raw-response: true
      parameters:
        - name: vehicle
          in: query
          required: true
          schema:
            type: string
            enum:
              - car
              - truck
              - bike
      responses:
        "200":
          description: 'Example'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Example"
  /examples/rawRequestResponse:
    get:
      operationId: getRawRequestResponse
      x-raw-request: true
      x-raw-response: true
      parameters:
        - name: vehicle
          in: query
          required: true
          schema:
            type: string
            enum:
              - car
              - truck
              - bike
      responses:
        "200":
          description: 'Example'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Example"
  /examples/rawRequestResponseAndHeaders:
    get:
      operationId: getRawRequestResponseAndHeaders
      x-raw-request: true
      x-raw-response: true
      parameters:
        - name: vehicle
          in: query
          required: true
          schema:
            type: string
            enum:
              - car
              - truck
              - bike
      responses:
        "200":
          description: 'Example'
          headers:
            Location:
              description: Redirect URL
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Example"
  /examples/noResponse:
    post:
      operationId: noResponse
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Foo'
      responses:
        "201":
          description: Created
        default:
          $ref: '#/components/responses/ErrorResponse'
  /examples/inlinedAllOf:
    post:
      operationId: AddInlinedAllOf
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Foo'
                - type: object
                  properties:
                    special:
                      type: boolean
        required: false
      responses:
        "200":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FooBar'
        default:
          $ref: '#/components/responses/ErrorResponse'
  /examples/inlinedBody:
    post:
      operationId: AddInlinedBody
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - f07
                - f10
              properties:
                f01:
                  type: boolean
                f01Null:
                  nullable: true
                  type: boolean
                f01b:
                  type: boolean
                  default: true
                f01bNull:
                  nullable: true
                  default: true
                  type: boolean
                f02:
                  type: integer
                f02Null:
                  nullable: true
                  type: integer
                f03:
                  type: integer
                  format: int32
                f03Null:
                  nullable: true
                  type: integer
                  format: int32
                f04:
                  type: integer
                  format: int64
                  default: 1
                f04Null:
                  nullable: true
                  type: integer
                  format: int64
                  default: 2
                f05:
                  type: string
                  format: date-time
                f05Null:
                  nullable: true
                  type: string
                  format: date-time
                f06:
                  type: string
                  format: uuid
                f06Null:
                  nullable: true
                  type: string
                  format: uuid
                f07:
                  type: string
                f07Null:
                  nullable: true
                  type: string
                f08:
                  type: string
                  default: valueA
                  enum:
                    - valueA
                    - valueB
                    - valueC
                f08Null:
                  nullable: true
                  type: string
                  default: valueB
                  enum:
                    - valueA
                    - valueB
                    - valueC
                f09:
                  $ref: "#/components/schemas/Season"
                f09Null:
                  $ref: "#/components/schemas/SeasonNullable"
                f10:
                  type: array
                  items:
                    type: string
                  minItems: 1
                f11:
                  type: array
                  items:
                    type: integer
                    format: int32
                f12:
                  type: array
                  items:
                    $ref: "#/components/schemas/Season"
                f13:
                  type: string
                  default: someValue
                f13Null:
                  nullable: true
                  type: string
                  default: someValue2
        required: false
      responses:
        "200":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FooBar'
        default:
          $ref: '#/components/responses/ErrorResponse'
  /examples/form:
    post:
      operationId: AddForm
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - f07
              properties:
                f01:
                  type: boolean
                f01Null:
                  nullable: true
                  type: boolean
                f01b:
                  type: boolean
                  default: true
                f01bNull:
                  nullable: true
                  default: true
                  type: boolean
                f02:
                  type: integer
                f02Null:
                  nullable: true
                  type: integer
                f03:
                  type: integer
                  format: int32
                f03Null:
                  nullable: true
                  type: integer
                  format: int32
                f04:
                  type: integer
                  format: int64
                  default: 1
                f04Null:
                  nullable: true
                  type: integer
                  format: int64
                  default: 2
                f05:
                  type: string
                  format: date-time
                f05Null:
                  nullable: true
                  type: string
                  format: date-time
                f06:
                  type: string
                  format: uuid
                f06Null:
                  nullable: true
                  type: string
                  format: uuid
                f07:
                  type: string
                f07Null:
                  nullable: true
                  type: string
                f08:
                  type: string
                  default: valueA
                  enum:
                    - valueA
                    - valueB
                    - valueC
                f08Null:
                  nullable: true
                  type: string
                  default: valueB
                  enum:
                    - valueA
                    - valueB
                    - valueC
                f09:
                  $ref: "#/components/schemas/Season"
                f09Null:
                  $ref: "#/components/schemas/SeasonNullable"
                f10:
                  type: array
                  items:
                      type: string
                  minItems: 1
                f11:
                  type: array
                  items:
                    type: integer
                    format: int32
                f12:
                  type: array
                  items:
                    $ref: "#/components/schemas/Season"
                f13:
                  type: string
                  default: someValue
                f13Null:
                  nullable: true
                  type: string
                  default: someValue2
        required: false
      responses:
        "200":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FooBar'
        default:
          $ref: '#/components/responses/ErrorResponse'
  /examples/form:multipart:
    post:
      operationId: AddMultipartForm
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file1
              properties:
                f1:
                  type: boolean
                f2:
                  type: integer
                f3:
                  type: integer
                  format: int32
                f4:
                  type: integer
                  format: int64
                f5:
                  type: string
                  format: date-time
                f6:
                  type: string
                  format: uuid
                f7:
                  type: string
                file1:
                  type: string
                  format: binary
                file2:
                  type: string
                  format: binary
        required: false
      responses:
        "200":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FooBar'
        default:
          $ref: '#/components/responses/ErrorResponse'
  /examples/header:
    get:
      operationId: HeaderResponse
      description: Check header responses
      responses:
        "200":
          description: OK
          headers:
            Location:
              description: Redirect URL
              schema:
                type: string
  /examples/auth/simple:
    get:
      operationId: getAuthSimple
      security:
        - HeaderAuth: []
      responses:
        "200":
          description: OK
  /examples/auth/simple/maybe:
    get:
      operationId: getAuthSimpleMaybe
      security:
        - HeaderAuth: []
        - {}
      responses:
        "200":
          description: OK
  /examples/auth/simple2:
    get:
      operationId: getAuthSimple2
      security:
        - HeaderAuth: ["foo"]
        - HeaderAuth: ["bar"]
      responses:
        "200":
          description: OK
  /examples/auth/simple2/maybe:
    get:
      operationId: getAuthSimple2Maybe
      security:
        - HeaderAuth: ["foo"]
        - HeaderAuth: ["bar"]
        - {}
      responses:
        "200":
          description: OK
  /examples/auth/complex:
    get:
      operationId: getAuthComplex
      security:
        - HeaderAuth: ["foo"]
        - HeaderAuth: ["bar"]
        - Jwt: []
      responses:
        "200":
          description: OK
  /examples/complexAuthMaybe:
    get:
      operationId: getAuthComplexMaybe
      security:
        - HeaderAuth: []
        - Jwt: []
        - {}
      responses:
        "200":
          description: OK
  /examples/complexSecurity:
    get:
      operationId: getComplexSecurity
      security:
        - Raw: []
        - Bearer: []
      responses:
        "200":
          description: OK
components:
  securitySchemes:
    HeaderAuth:
      type: apiKey
      name: Authorization
      in: header
    Jwt:
      type: apiKey
      name: jwt
      in: query
    Bearer:
      type: http
      scheme: bearer
    Raw:
      x-raw-auth: true
      type: apiKey
      name: Authorization
      in: header
  parameters:
    IdParam:
      name: id
      in: path
      description: id
      required: true
      schema:
        type: string
        format: uuid
    NameParam:
      name: name
      in: path
      description: name
      required: true
      schema:
        type: string
    PlayerIdQuery:
      name: playerId
      in: query
      description: playerId
      required: true
      schema:
        $ref: "#/components/schemas/PlayerId"
    ColorQuery:
      name: color
      in: query
      required: true
      schema:
        type: string
        enum:
          - red
          - green
          - blue
    ColorQueryDefault:
      name: colorDefault
      in: query
      required: true
      schema:
        type: string
        default: red
        enum:
          - red
          - green
          - blue
    SeasonQuery:
      name: season
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/Season"
  responses:
    ErrorResponse:
      description: There was an error processing the request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errorV1'
  schemas:
    errorV1:
      title: Error Response
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      description: Standard error format
    Examples:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: "#/components/schemas/Example"
      required:
        - list

    Example:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        playerId:
          $ref: "#/components/schemas/PlayerId"
        idMaybe:
          type: string
          format: uuid
          nullable: true
        playerAlways:
          $ref: "#/components/schemas/PlayerAlways"
        playerMaybe:
          $ref: "#/components/schemas/PlayerMaybe"
      required:
        - id

    PlayerId:
      type: string
      format: uuid

    PlayerAlways:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/PlayerId"
      required:
        - id

    PlayerMaybe:
      type: object
      nullable: true
      properties:
        id:
          $ref: "#/components/schemas/PlayerId"
      required:
        - id

    Patterns:
      type: object
      properties:
        id:
          type: string
          format: uuid
        idMaybe:
          type: string
          format: uuid
        state:
          pattern: (enabled|disabled)
          type: string
          nullable: true
          minLength: 2
          maxLength: 10
        state2:
          pattern: (enabled|disabled)
          type: string
        state3:
          type: string
          default: completed
          nullable: true
        stateAlways:
          pattern: (enabled|disabled)
          type: string
          nullable: true
        valueMaybe:
          nullable: true
          type: integer
          minimum: 2
          maximum: 10
          multipleOf: 2
        valueFMaybe:
          nullable: true
          type: number
          minimum: 2
          maximum: 10
          multipleOf: 2
        valuesMaybe:
          nullable: true
          type: array
          items:
            type: string
          minItems: 2
          maxItems: 10
        value:
          type: integer
          minimum: 2
          maximum: 10
          multipleOf: 2
        valueF:
          type: number
          minimum: 2
          maximum: 10
          multipleOf: 2
        values:
          type: array
          items:
            type: string
          minItems: 2
          maxItems: 10
        subValue:
          type: object
          properties:
            num:
              type: integer
              minimum: 2
        subObjectMaybe:
          $ref: "#/components/schemas/SubPattern"
        subObject:
          $ref: "#/components/schemas/SubPattern"
        subInt:
          $ref: "#/components/schemas/IntValue"
        subState:
          $ref: "#/components/schemas/State"
        subStateMaybe:
          $ref: "#/components/schemas/State"
        timeStamp:
          type: string
          format: date-time
        timeStampMaybe:
          type: string
          format: date-time
      required:
        - id
        - stateAlways
        - subObject
        - subState
        - timeStamp

    IntValue:
      type: integer
      minimum: 2
      maximum: 10
      multipleOf: 2

    State:
      pattern: (enabled|disabled)
      type: string
      nullable: true
      minLength: 2
      maxLength: 10

    SubPattern:
      nullable: true
      type: object
      properties:
        num:
          type: integer
          minimum: 2

    Season:
      type: string
      enum:
        - spring
        - summer
        - fall
        - winter

    SeasonNullable:
      nullable: true
      type: string
      enum:
        - spring
        - summer
        - fall
        - winter

#test out nested types
    XArrayEnum:
      type: array
      items:
        type: string
        enum:
          - option_a
          - option_b
          - option_c


    XArrayObjectEnum:
      type: array
      items:
        type: object
        properties:
          options:
            type: string
            enum:
              - option_a
              - option_b
              - option_c

    XArrayObjectArrayEnum:
      type: array
      items:
        type: object
        properties:
          list:
            type: array
            items:
              type: string
              enum:
                - option_a
                - option_b
                - option_c

    XObjectEnum:
      type: object
      properties:
        options:
          type: string
          enum:
            - option_a
            - option_b
            - option_c

    XObjectArrayEnum:
      type: object
      properties:
        items:
          type: array
          items:
            type: string
            enum:
              - option_a
              - option_b
              - option_c

    XObjectArrayObjectEnum:
      type: object
      properties:
        list:
          type: array
          items:
            type: object
            properties:
              options:
                type: string
                enum:
                  - option_a
                  - option_b
                  - option_c

    example-kebab-case-field:
      type: object
      properties:
        tier:
          pattern: (alpha|beta|gama)
          type: string
        seniority:
          pattern: (^[1-9]\d*$)
          type: string

    NamedObject:
      type: object
      description: Named object

    FooString:
      type: string
      pattern: (f1|f2)

    Foo:
        type: object
        properties:
           foos:
             $ref: "#/components/schemas/FooString"

    Bar:
      type: object
      properties:
        bars:
          type: string
          minLength: 2
          pattern: (b1|b2)

    Buzz:
      type: object
      properties:
        buzzes:
          type: string

    FooBar:
      allOf:
        - $ref: "#/components/schemas/Foo"
        - $ref: "#/components/schemas/Bar"
        - type: object
          required:
            - a
          properties:
            a:
              type: string
              minLength: 2
            b:
              $ref: "#/components/schemas/Season"
            c:
              $ref: "#/components/schemas/IntValue"

    FooBarBuzz:
      allOf:
        - $ref: "#/components/schemas/FooBar"
        - $ref: "#/components/schemas/Buzz"
        - type: object
          properties:
            x:
              type: boolean

    DefaultWithoutRequired:
      type: object
      properties:
        f1:
          type: string
          default: "surprise!"

    NotRequiredWithValidation:
      type: object
      properties:
        f1:
          minItems: 2
          type: array
          items:
            type: string