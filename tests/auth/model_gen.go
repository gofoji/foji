// Code generated by foji (dev build), template: foji/openapi/model.go.tpl; DO NOT EDIT.

package auth

import (
	"database/sql/driver"
	"encoding/json"
	"errors"
	"fmt"
)

var ErrMissingRequiredField = errors.New("missing required field")

// Component Schemas

// Error
//
// OpenAPI Component Schema: Error
type Error struct {
	Code    int32  `json:"code,omitempty"`
	Error   string `json:"error,omitempty,omitzero"`
	Message string `json:"message,omitempty,omitzero"`
}

// User
//
// OpenAPI Component Schema: User
type User struct {
	Email    string   `json:"email,omitempty,omitzero"`
	ID       int64    `json:"id,omitempty"`
	Role     UserRole `json:"role,omitempty,omitzero"`
	Username string   `json:"username,omitempty,omitzero"`
}

// UserRole
// Component Schema : role
type UserRole int8

const (
	UnknownUserRole UserRole = iota
	UserRoleUser
	UserRoleAdmin
	UserRoleModerator
)

func NewUserRole(name string) UserRole {
	switch name {
	case "user":
		return UserRoleUser
	case "admin":
		return UserRoleAdmin
	case "moderator":
		return UserRoleModerator
	}

	return UserRole(0)
}

var UserRoleString = map[UserRole]string{
	UserRoleUser:      "user",
	UserRoleAdmin:     "admin",
	UserRoleModerator: "moderator",
}

func (e UserRole) String() string {
	return UserRoleString[e]
}

func (e *UserRole) UnmarshalJSON(input []byte) (err error) {
	var i int8

	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = UserRole(i)
		return nil
	}

	var s string

	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}

	*e = NewUserRole(s)

	return nil
}

func (e UserRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(e.String())
}

func (e UserRole) Value() (driver.Value, error) {
	return json.Marshal(e.String())
}

func (e *UserRole) Scan(src interface{}) error {
	s, ok := src.(string)
	if !ok {
		return fmt.Errorf("UserRole.scan: scanned a %T, not []byte", src) //nolint
	}

	*e = NewUserRole(s)

	return nil
}

// Component Parameters

// Path Operations

// GetPublicStatusResponse
//
// OpenAPI getPublicStatus Response: getPublicStatus Response
type GetPublicStatusResponse struct {
	Status  string `json:"status,omitempty,omitzero"`
	Version string `json:"version,omitempty,omitzero"`
}
