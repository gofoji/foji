// Code generated by foji, template: foji/openapi/handler.go.tpl; DO NOT EDIT.

package auth

import (
	"context"
	"net/http"

	"github.com/bir/iken/httputil"
	"github.com/bir/iken/logctx"
	"github.com/bir/iken/params"
	"github.com/bir/iken/validation"
	"tests/example"
)

type (
	RequestAuthenticator = httputil.AuthenticateFunc[*example.ExampleAuth]
	TokenAuthenticator   = httputil.TokenAuthenticatorFunc[*example.ExampleAuth]

	SecurityGroup      = httputil.SecurityGroup[*example.ExampleAuth]
	SecurityGroups     = httputil.SecurityGroups[*example.ExampleAuth]
	AuthorizeFunc      = httputil.AuthorizeFunc[*example.ExampleAuth]
	BasicAuthenticator = httputil.BasicAuthenticatorFunc[*example.ExampleAuth]
)

type Operations interface {
	ListAdminUsers(ctx context.Context, user *example.ExampleAuth) ([]User, error)
	QueryDataWithApiKey(ctx context.Context, user *example.ExampleAuth, query *string) error
	ListDocuments(ctx context.Context, user *example.ExampleAuth) error
	CreateDocument(ctx context.Context, user *example.ExampleAuth) error
	GetDetailedProfile(ctx context.Context, user *example.ExampleAuth) error
	GetProtectedResource(ctx context.Context, user *example.ExampleAuth) error
	GetPublicStatus(ctx context.Context) (*GetPublicStatusResponse, error)
	GetCurrentUser(ctx context.Context, user *example.ExampleAuth) (*User, error)
	GetUserProfile(ctx context.Context, user *example.ExampleAuth) (*User, error)
}

type OpenAPIHandlers struct {
	ops                          Operations
	apiKeyCookieAuth             RequestAuthenticator
	apiKeyHeaderAuth             RequestAuthenticator
	apiKeyQueryAuth              RequestAuthenticator
	basicAuthAuth                RequestAuthenticator
	bearerAuthAuth               RequestAuthenticator
	oauth2ExampleAuth            RequestAuthenticator
	openIdconnectAuth            RequestAuthenticator
	rawAuth                      RequestAuthenticator
	authorize                    AuthorizeFunc
	listAdminUsersSecurity       SecurityGroups
	queryDataWithApiKeySecurity  SecurityGroups
	createDocumentSecurity       SecurityGroups
	getProtectedResourceSecurity SecurityGroups
	getCurrentUserSecurity       SecurityGroups
}

type Mux interface {
	Handle(pattern string, handler http.Handler)
}

func RegisterHTTP(ops Operations, r Mux, apiKeyCookieAuth TokenAuthenticator, apiKeyHeaderAuth TokenAuthenticator, apiKeyQueryAuth TokenAuthenticator, basicAuthAuth BasicAuthenticator, bearerAuthAuth TokenAuthenticator, oauth2ExampleAuth RequestAuthenticator, openIdconnectAuth RequestAuthenticator, rawAuth RequestAuthenticator, authorize AuthorizeFunc) *OpenAPIHandlers {
	s := OpenAPIHandlers{
		ops:               ops,
		apiKeyCookieAuth:  httputil.CookieAuth("cookie_name", apiKeyCookieAuth),
		apiKeyHeaderAuth:  httputil.HeaderAuth("X-API-Key", apiKeyHeaderAuth),
		apiKeyQueryAuth:   httputil.QueryAuth("query_key_name", apiKeyQueryAuth),
		basicAuthAuth:     httputil.BasicAuth(basicAuthAuth),
		bearerAuthAuth:    httputil.BearerAuth("Authorization", bearerAuthAuth),
		oauth2ExampleAuth: oauth2ExampleAuth,
		openIdconnectAuth: openIdconnectAuth,
		rawAuth:           rawAuth,
		authorize:         authorize,
	}

	s.listAdminUsersSecurity = SecurityGroups{
		SecurityGroup{httputil.NewAuthCheck(s.apiKeyHeaderAuth, nil), httputil.NewAuthCheck(s.bearerAuthAuth, nil)},
	}

	s.queryDataWithApiKeySecurity = SecurityGroups{
		SecurityGroup{httputil.NewAuthCheck(s.apiKeyHeaderAuth, nil)},
		SecurityGroup{httputil.NewAuthCheck(s.apiKeyQueryAuth, nil)},
		SecurityGroup{httputil.NewAuthCheck(s.apiKeyCookieAuth, nil)},
		SecurityGroup{httputil.NewAuthCheck(s.rawAuth, nil)},
	}

	s.createDocumentSecurity = SecurityGroups{
		SecurityGroup{httputil.NewAuthCheck(s.apiKeyHeaderAuth, authorize, "write"), httputil.NewAuthCheck(s.bearerAuthAuth, nil)},
	}

	s.getProtectedResourceSecurity = SecurityGroups{
		SecurityGroup{httputil.NewAuthCheck(s.apiKeyHeaderAuth, nil), httputil.NewAuthCheck(s.basicAuthAuth, nil)},
		SecurityGroup{httputil.NewAuthCheck(s.apiKeyCookieAuth, nil), httputil.NewAuthCheck(s.bearerAuthAuth, nil)},
	}

	s.getCurrentUserSecurity = SecurityGroups{
		SecurityGroup{httputil.NewAuthCheck(s.apiKeyHeaderAuth, nil)},
		SecurityGroup{httputil.NewAuthCheck(s.bearerAuthAuth, nil)},
		SecurityGroup{httputil.NewAuthCheck(s.oauth2ExampleAuth, nil)},
	}

	r.Handle("GET /admin/users", http.HandlerFunc(s.ListAdminUsers))
	r.Handle("GET /data/query", http.HandlerFunc(s.QueryDataWithApiKey))
	r.Handle("GET /documents", http.HandlerFunc(s.ListDocuments))
	r.Handle("POST /documents", http.HandlerFunc(s.CreateDocument))
	r.Handle("GET /profile/detailed", http.HandlerFunc(s.GetDetailedProfile))
	r.Handle("GET /protected-resource", http.HandlerFunc(s.GetProtectedResource))
	r.Handle("GET /public/status", http.HandlerFunc(s.GetPublicStatus))
	r.Handle("GET /users/me", http.HandlerFunc(s.GetCurrentUser))
	r.Handle("GET /users/profile", http.HandlerFunc(s.GetUserProfile))

	return &s
}

// ListAdminUsers
// List all users (admin only)
// Requires both API key AND bearer token with admin scope
func (h OpenAPIHandlers) ListAdminUsers(w http.ResponseWriter, r *http.Request) {
	var err error

	logctx.SetOperation(r.Context(), "listAdminUsers")
	logctx.AddStrToContext(r.Context(), "op", "listAdminUsers")

	user, err := h.listAdminUsersSecurity.Auth(r)
	if err != nil {
		httputil.ErrorHandler(w, r, err)

		return
	}

	response, err := h.ops.ListAdminUsers(r.Context(), user)
	if err != nil {
		httputil.ErrorHandler(w, r, err)

		return
	}

	httputil.JSONWrite(w, r, 200, response)
}

// QueryDataWithApiKey
// Query data with API key
// Accepts API key in header, query parameter, or cookie
func (h OpenAPIHandlers) QueryDataWithApiKey(w http.ResponseWriter, r *http.Request) {
	var err error

	logctx.SetOperation(r.Context(), "queryDataWithApiKey")
	logctx.AddStrToContext(r.Context(), "op", "queryDataWithApiKey")

	user, err := h.queryDataWithApiKeySecurity.Auth(r)
	if err != nil {
		httputil.ErrorHandler(w, r, err)

		return
	}

	var validationErrors validation.Errors

	var query *string

	queryVal, ok, err := params.GetStringQuery(r, "query", false)
	if err != nil {
		validationErrors.Add("query", err)
	}

	if ok {
		query = &queryVal
	}

	if validationErrors != nil {
		httputil.ErrorHandler(w, r, validationErrors.GetErr())

		return
	}

	err = h.ops.QueryDataWithApiKey(r.Context(), user, query)
	if err != nil {
		httputil.ErrorHandler(w, r, err)

		return
	}

	w.WriteHeader(200)
}

// ListDocuments
// List documents
// Requires basic authentication
func (h OpenAPIHandlers) ListDocuments(w http.ResponseWriter, r *http.Request) {
	var err error

	logctx.SetOperation(r.Context(), "listDocuments")
	logctx.AddStrToContext(r.Context(), "op", "listDocuments")

	user, err := h.basicAuthAuth(r)
	if err != nil {
		httputil.ErrorHandler(w, r, err)

		return
	}

	err = h.ops.ListDocuments(r.Context(), user)
	if err != nil {
		httputil.ErrorHandler(w, r, err)

		return
	}

	w.WriteHeader(200)
}

// CreateDocument
// Create document
// Requires API key with bearer token
func (h OpenAPIHandlers) CreateDocument(w http.ResponseWriter, r *http.Request) {
	var err error

	logctx.SetOperation(r.Context(), "createDocument")
	logctx.AddStrToContext(r.Context(), "op", "createDocument")

	user, err := h.createDocumentSecurity.Auth(r)
	if err != nil {
		httputil.ErrorHandler(w, r, err)

		return
	}

	err = h.ops.CreateDocument(r.Context(), user)
	if err != nil {
		httputil.ErrorHandler(w, r, err)

		return
	}

	w.WriteHeader(201)
}

// GetDetailedProfile
// Get detailed profile
// Requires OpenID Connect authentication
func (h OpenAPIHandlers) GetDetailedProfile(w http.ResponseWriter, r *http.Request) {
	var err error

	logctx.SetOperation(r.Context(), "getDetailedProfile")
	logctx.AddStrToContext(r.Context(), "op", "getDetailedProfile")

	user, err := h.openIdconnectAuth(r)
	if err != nil {
		httputil.ErrorHandler(w, r, err)

		return
	}

	err = h.ops.GetDetailedProfile(r.Context(), user)
	if err != nil {
		httputil.ErrorHandler(w, r, err)

		return
	}

	w.WriteHeader(200)
}

// GetProtectedResource
// Access protected resource
// Multiple authentication options:
// 1. OAuth2 with read scope, OR
// 2. API key (header) + Basic auth, OR
// 3. Bearer token + API
// key (cookie)
func (h OpenAPIHandlers) GetProtectedResource(w http.ResponseWriter, r *http.Request) {
	var err error

	logctx.SetOperation(r.Context(), "getProtectedResource")
	logctx.AddStrToContext(r.Context(), "op", "getProtectedResource")

	user, err := h.getProtectedResourceSecurity.Auth(r)
	if err != nil {
		httputil.ErrorHandler(w, r, err)

		return
	}

	err = h.ops.GetProtectedResource(r.Context(), user)
	if err != nil {
		httputil.ErrorHandler(w, r, err)

		return
	}

	w.WriteHeader(200)
}

// GetPublicStatus
// Get API status
// Public endpoint that requires no authentication
func (h OpenAPIHandlers) GetPublicStatus(w http.ResponseWriter, r *http.Request) {
	var err error

	logctx.SetOperation(r.Context(), "getPublicStatus")
	logctx.AddStrToContext(r.Context(), "op", "getPublicStatus")

	response, err := h.ops.GetPublicStatus(r.Context())
	if err != nil {
		httputil.ErrorHandler(w, r, err)

		return
	}

	httputil.JSONWrite(w, r, 200, response)
}

// GetCurrentUser
// Get current user
// Requires either API key in header OR bearer token
func (h OpenAPIHandlers) GetCurrentUser(w http.ResponseWriter, r *http.Request) {
	var err error

	logctx.SetOperation(r.Context(), "getCurrentUser")
	logctx.AddStrToContext(r.Context(), "op", "getCurrentUser")

	user, err := h.getCurrentUserSecurity.Auth(r)
	if err != nil {
		httputil.ErrorHandler(w, r, err)

		return
	}

	response, err := h.ops.GetCurrentUser(r.Context(), user)
	if err != nil {
		httputil.ErrorHandler(w, r, err)

		return
	}

	httputil.JSONWrite(w, r, 200, response)
}

// GetUserProfile
// Get user profile
// Requires bearer token authentication
func (h OpenAPIHandlers) GetUserProfile(w http.ResponseWriter, r *http.Request) {
	var err error

	logctx.SetOperation(r.Context(), "getUserProfile")
	logctx.AddStrToContext(r.Context(), "op", "getUserProfile")

	user, err := h.bearerAuthAuth(r)
	if err != nil {
		httputil.ErrorHandler(w, r, err)

		return
	}

	response, err := h.ops.GetUserProfile(r.Context(), user)
	if err != nil {
		httputil.ErrorHandler(w, r, err)

		return
	}

	httputil.JSONWrite(w, r, 200, response)
}
